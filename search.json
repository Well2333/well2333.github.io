[{"title":"【NoneBot2】第二章：基础插件编写指南第二节———听得见，说得出","date":"2022-02-11T14:30:07.000Z","url":"/2022/02/11/nonebot/%E3%80%90NoneBot2%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97%E7%AC%AC%E4%BA%8C%E8%8A%82%E2%80%94%E2%80%94%E2%80%94%E5%90%AC%E5%BE%97%E8%A7%81%EF%BC%8C%E8%AF%B4%E5%BE%97%E5%87%BA/","tags":[["NoneBot2","/tags/NoneBot2/"]],"categories":[["NoneBot2系列教程","/categories/NoneBot2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"]],"content":"本节中，将会初步涉及 事件响应器 与 事件处理 ，但这只是其冰山一角，在后续的教程中将会详细补充。但首先我们需要知道，它们是什么。 事件响应器与事件处理在上一节中，我们将插件比作nonebot的 “意识” ，而意识我们可以简单的理解为由无数 “条件反射” 所组成的（说法并不严谨，仅作为比喻）。那么，事件响应器就是 “条件反射” 中的 “条件” 、事件处理就是 “反射” 。换言之，事件响应器是对于机器人所收到的信息进行检验，满足我们预设的 “条件” 之后就会将信号传导nonebot，进一步去触发事件处理流程的开始，也就是进行 “反射” 。 事件响应器既然事件响应器是 “条件反射” 中的 “条件” ，那么自然我们可以使用多种方法去描述这个 “条件” 。 事件的类型在nonebot中，事件分为四大类：meta_event, message, notice, request 元事件-metaevent 对应的事件响应器为 on_metaevent() 一类特殊的事件，与nonebot2的运行相关，例如心跳事件、ws连接等。由于该类事件我们一般来说不会做响应，因此我不做过多解释 通知事件-notice 对应的事件响应器为 on_notice() 一些较为特殊的事件，且无需管理员的批准即可主动完成的操作，例如上传文件、禁言^禁言、戳一戳这种消息会被归为通知事件。 在nonebot2的运行日志中，通知事件会按照 [notice.xxx.xxx]: &#123;xxx&#125; 的形式显现。 其中，{xxx}是一个json格式的数据，具体内容可以详见go-cqhttp的文档。 请求事件-request 对应的事件响应器为 on_request() 一些较为特殊的事件，且需要管理员（或你）的批才能完成的操作，例如好友申请、加群申请等。在nonebot2的运行日志中，请求事件会按照 [request.xxx]: &#123;xxx&#125; 的形式显现。 其中，{xxx}是一个json格式的数据，具体内容可以详见go-cqhttp的文档。 消息事件-message 对应的事件响应器为 on_message() 是最基本的事件，仅通过聊天框和历史记录进行显示的的绝大多数都是消息类型，例如我们日常聊天的内容、发的图片等。在nonebot2的运行日志中，消息事件会按照[message.xxx.xxx]: Message xxx from xxx &quot;xxx&quot;的形式显现。 而消息时间中，又可以根据格式不同划分为更多种类的细化的消息事件，在此不多做解释，在实例中和第三章的进阶教程中会有展示。"},{"title":"【NoneBot2】第二章：基础插件编写指南第一节———前置知识","date":"2022-02-10T18:50:07.000Z","url":"/2022/02/11/nonebot/%E3%80%90NoneBot2%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E5%9F%BA%E7%A1%80%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%8C%87%E5%8D%97%E7%AC%AC%E4%B8%80%E8%8A%82%E2%80%94%E2%80%94%E2%80%94%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/","tags":[["NoneBot2","/tags/NoneBot2/"]],"categories":[["NoneBot2系列教程","/categories/NoneBot2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"]],"content":"在这个章节正式开始之前，我们首先需要为接下来的学习奠定一些基础。 python基础由于nonebot是使用了 asyncio 的异步框架，并且使用了较多语法糖，相对来说并不适合新手入门，因此如果这个是你入门python之后的第一个实践项目，请做好十足的心理准备。在此推荐几个个人入门看的python教程 python程序语言设计（视频及网站：中国大学Mooc）  优点: 北京理工大学出品，国家精品课程，目前仍在开课 面向非程序员，零基础人群 完全免费，没有第三方网站付费才能解锁题库啥的骚操作 节奏把控很好，能在短时间内快速上手 有配套练习 有专门的老师可以帮助答疑 缺点： 第二周的课程实际完全用不到，属于是为了迎合大学课程特地加的一节，完全没必要去听 课程深度很浅，基本上就只是半只脚入了门的水平，不足以读懂大部分项目的文档（但是能看懂部分教程） 课程开始时间为2018年，可能已经部分过时了 如果只学这一个课程的话，可能无法看懂本教程的部分内容，完全不足以看懂官方文档。 孙兴华zz（视频：B站）  优点: 讲的非常简单易懂 面向非程序员，零基础人群 完全免费，没有第三方网站付费才能解锁题库啥的骚操作 python相关教程很多，可以作为入门项目的库有不少 缺点： 代码采用了大量中文变量，以及并不十分规范的格式，如果照抄有可能会被大佬嫌弃 深度并不足以阅读nonebot的源码，但是完全可以看懂此教程。 python教程以及有段时间没更了，估计以后接着更的可能性也不高 菜鸟教程（网站：网站）  优点: 基础部分十分全面，进阶部分也有代码示例等 十分适合作为速查手册辅助学习 目前国内面对新手的教程向网站中最好的 适合有编程基础的快速上手 缺点： 没有视频以及答疑 不适合完全没接触过编程的小白硬啃，需要配合上面的视频教程使用 nonebot的目录结构nonebot的目录结构其实并不复杂，按照 官方文档 中的示例，我们可以看到如下的结构： 我们可以把项目的文件分为如下两类： 常规文件顾名思义，常规结构（当然有一些使用nonebot的单文件机器人）中机器人运行中不可或缺的文件，或是常规结构中无法直接删除的文件等。 src文件夹（或以机器人的名字命名的文件夹）该文件夹是我们用于放置插件的文件夹，这个文件夹可以随意起名，甚至不是必须存在的，但为了代码的规范以及目录结构的工整，官方的指导建议是将插件放置于 src/plugins 文件夹下。如果没有特殊情况，个人建议按照官方的建议，将插件放置在指定位置，并且使用 scr 作为其名字而不是机器人的名字，例如 awesome_bot（上面的那个案例就是反例）。这样做的目的是为了达到较高的兼容性，否则部分依赖于路径的插件会无法正常工作 .env.* 文件 注意：在部分操作系统下，以 . 为首的文件会被隐藏，因此，我们需要一些设置才能直接看到这些文件，具体方法请善用搜索引擎自行查找。 顾名思义，用于储存环境变量的文件，其中 .env 文件一般用于指向另外两个文件。其中的内容一般为 ENVIRONMENT=prod 或 ENVIRONMENT=dev 中的一种，分别指向下面介绍的两个配置文件。 实际上，你可以在 .env 中直接填写配置，而不需要指向另外两个配置文件。在指向另外的文件的时候，.env 中的内容也会被添加至环境变量一同加载。如果配置文件中的内容有所冲突，此处可参考 官方文档 对此的描述: bot.py 文件( nonebot.init ) &gt; 系统环境变量 &gt; .env, .env.* 文件 .env.prod 文件是用于 生产环境 的环境变量存储，也就是日常使用的环境。.env.dev 文件是用于 测试环境 的环境变量存储，也就是编写插件或者其他测试的时候使用的，一般来说会开启一些实验性功能以及更加详细的log，能为我们debug提供更多信息。 注意：这两个文件中起决定性差距的并不是文件名，而且其中的内容，例如你可以在 .env.prod 中开启debug模式，也可以不在 .env.dev 中开启任何测试性内容。但从实际出发，个人是十分不推荐这么做的，请务必不要这么做！！！ 在实际使用中，我们一般来说可以把无论哪个环境都需要加载的环境变量填写到 .env 中，对于某种特定环境变量填写在对应的环境变量中。 bot.py 文件相当于机器人的心脏，在这个文件中执行了机器人的初始化以及插件加载等操作。由于其中的代码与其他文件和其他插件有较强的的关联性，因此不在此单独说明。 pyproject.toml 文件项目插件配置文件，一般来说是存储一些项目信息的文件，包括自动导入插件等操作。在 bot.py 中对应的加载代码为 nonebot.load_from_toml(&quot;pyproject.toml&quot;) 重要以下纯属依据我浅薄的经验得出的个人观点，希望各位结合实际合理选择操作方法，而不是单纯听信我的一家之言，盲目反对官方的目录结构安排不合理。 但我个人是并不建议使用这个文件进行自动导入的，理由如下： 我们可以用其他更加直观可控的方法进行插件加载等操作，例如 nonebot.load_plugin(&#39;插件名字&#39;) 这个文件是配合 nb-cli 中提供的脚手架进行使用的，相对第一条中的方法有编辑器进行语法提示来说有更高的翻车风险。 最重要的一点，在部分环境下，pyproject.toml 并不能正常的导入插件（详细可见视频），也就是在不同的环境下可能会导致完全不一样的结果。 因此，我一般会在 bot.py 中直接将 nonebot.load_from_toml(&quot;pyproject.toml&quot;) 这行代码直接注释掉或删除。 其他文件在常规的部署方法下，该部分的文件可直接删除，而不会对机器人的正常使用造成任何影响。 docker相关的文件docker-compose.yml 以及 Dockerfile官方提供的 docker 支持，在之后可能会出的docker部署教程会介绍。 其他文件.gitignore 以及 README.md类似于谁都不会看的说明书吧，对机器人来说没什么用。 (￣ε(#￣) nonebot的插件官方文档中对插件的介绍假如说使用nonebot搭建的机器人是一个人的话，nonebot可以理解为这个机器人的身体，能够做出各种各样的行为，但并不能产生自我意识。而插件则是这个人体中的“意识”，仅凭自己是无法独立存在的，但可以依赖身体做出行为，对身体进行指导。 插件放在哪？理论上，你放在哪里都可以，就像你可以把Windows中的程序安装在任何系统允许的位置。但从可读性以及历史角度出发，nonebot中的插件一般来说有两个相对固定的存放位置 site-packages也就是python的第三方库的存放位置，这里可以直接使用 nonebot.load_plugin() 来进行载入，一般来说，你从插件商店下载的插件就会存在这里。 scr/plugins上文中提及到的目录，在此不再次赘述。可以使用 nonebot.load_plugins(&quot;src/plugins&quot;) 来加载该文件夹中的插件。 注意！如果插件的名字首个字符是 _ 的话，那么这个插件将不会被 “自动加载” ，但仍可以使用单独加载的方式进行载入。 插件的结构在nonebot中，插件可以以模块(module)或包(package)的形式导入，这个相信对于编写过多文件脚本的同学并不陌生，这里的模块形式和包形式与python中的定义一致。 模块(module)也就是单文件形式的python脚本，例如下方展示的名为 my_plugin 的插件。 相对于包形式的插件，模块形式的插件更简单，但相对的只能在一个文件中塞下全部代码，因此除非十分简单的插件，不建议使用该形式。 包(package)以一个文件夹形式存在的包，例如下方展示的名为 my_plugin 的插件。 值得注意的是，在python中，一个合法的包中必须含有一个 __init__.py ，即便其中一个字都没有也不能省略。 相对于模块形式的插件，包形式的插件更加灵活美观，是个人比较推荐的插件形式。"},{"title":"【NoneBot2】第一章：安装并配置你的机器人及常见报错的解决方法","date":"2022-02-02T13:11:07.000Z","url":"/2022/02/02/nonebot/%E3%80%90NoneBot2%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E5%AE%89%E8%A3%85%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%BD%A0%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%8F%8A%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","tags":[["NoneBot2","/tags/NoneBot2/"]],"categories":[["NoneBot2系列教程","/categories/NoneBot2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"]],"content":"由于环境安装的内容较为抽象，安装的步骤较为繁琐，建议观看视频教程。本节将会着重介绍常见错误的解决方法。 本章节仅会针对视频中未指出的内容进行补充与拓展，将不会重复已经在视频中提及的内容。 如果你需要提问，请看这里首先，你需要知道的是，这是个开源项目，这篇文章是你免费观看的，nonebot群是你免费加的，没有任何一个开发者和回答问题的人从你这拿走了一分钱。所以，没人对你负有责任，也没人对你有回答问题的义务。 所有人都从新手过来的，自然也不会无理由拒绝一个新人的提问，不过你的态度和提问方法决定了你的提问成功率，所以我在此不负责任的提供一些提高提问成功率的方法： 最重要的是端正你的态度，用相对温和的方式进行提问，富有耐心。 妥善保留 问题发生时 的nonebot日志以及gocq日志，要能清晰的看到错误信息，如果不知道哪里是错误信息就全都保留下来。 使用qq截图 (Ctrl+Alt+A) 或Windows自带的截图 (Win+PrtSc) 或其他截图工具进行截图，切勿使用手机拍屏 尽量详细的描述是什么样的问题，而不是“大佬我这机器人出错了”就完了。 错误的提问 救命啊大佬我这个机器人没反应怎么办啊？（同时不提供任何其他说明和信息） 没有提供日志和截图、也没有详细的描述 这群里没个活人吗，我这机器人打不开了！ 理由同上，不过就算把其他信息补全了我也不会进行任何回答的，态度过于恶劣 私聊：大佬你看看我这机器人怎么回事？ 私聊提问是非常不礼貌的且占用对方时间的行为，大佬回你了是他脾气好，像我这种暴躁老弟一般就不理你了，要是翻来覆去骚扰的话反而会骂你加拉黑。除非对方明确提出私聊，否则不要轻易私聊提问！！！ 我觉得xxxx，所以我这机器人报错了怎么改？不过你说的不对，我觉得就是xxxxx…… 自以为是型选手，自己出了问题解决不了来求助，但是不按照大佬的解决方法走，有一套自己的想法，这种人我建议还是自己去研究吧，唯心主义没人救得了。 大佬你看看我这个机器人xxx报错了，这个是截图（截图之截了非常小一行） 要提问就别怕截图，群友要你的隐私有啥用？这种提问方式不仅和第一种一样没有效率，而且还会更加消磨他人的耐心。 大佬看看我这个问题吧！（此前已经刷了n多次） 没人回答的情况，你应该首先检查自己的提问方法有无问题，提没提供完整的资料。如果你已经完整提供了截图和说明，那么此时应该是没有人能解答你的问题，可以过段时间大佬来水群了再试，而不是一直刷，这样容易被禁言或直接飞机票 大佬我这个机器人……(提了一个重复了无数次的问题) 遇到问题先去尝试自己解决！看看文档和教程，翻翻历史记录，把报错代码粘到浏览器里面搜一下，不会怀孕的！不要一出问题就来问个不停，除非你给个大佬打个红包让他一对一教你，不然再有耐心都会被消磨殆尽的。 把你的机器人打包发我一份谢谢 伸手党型，自己一点脑子也不愿意动，我觉得这种人也不会来看这篇文章的，希望你不是。 待补充，如果之后有啥能让我血压飙升的提问我会在这里补充的 VSCode的常见使用误区工作路径错误由于vscode默认会自动合并窗口，而部分情况下（例如第一个打开的窗口是工作区）会导致工作路径与实际路径不符，导致依赖于相对路径的程序找不到对应的文件，产生报错。 错误特征报错内容为 FileNotFoundError: [Errno 2] No such file or directory: &#39;xxxxx&#39; 。其中xxxxx可以是任意你确定没有丢失的文件的名字，例如 pyproject.toml 。 核实方法也很简单，在使用 nb run 指令不报错的情况下，使用vscode却出现这样的报错一般情况下就是工作路径错误。 或者，我们可以在 bot.py 的最开始处中添加如下代码，然后检查输出的两个路径是否一致。 解决方法解决该问题的方法无非两种，一是正确的设置工作路径，二是在程序内将错误的路径改正即可。 解决方法1在目标文件夹内，右键空白区域，选择使用code打开，然后再次运行即可。 解决方法2关掉目前vscode的全部窗口（最小化的也要关掉），然后再打开 bot.py 。 解决方法3（推荐）按照下图方式，设置新建窗口（从off改为on或者default），这个操作可以一劳永逸的解决这类问题。 解决方法4（推荐）若非开发插件或调试插件，可以直接使用 nb run 命令开启。 解决方法5（强烈推荐）在 bot.py 的 最开始 添加如下代码。 这段代码可以提取bot.py所在的文件夹的位置，并且将工作路径改到该文件夹，相对于上述方法，此方法不仅可以跨平台，也适用于其他python脚本（不止nonebot可用）。 常见报错的解决方法此节将会持续收录常见的报错以及其解决方法。 nonebot与gocqhttp无法建立连接 强烈推荐使用 nonebot-plugin-gocqhttp 插件来构建nonebot与gocq的连接。项目仓库 使用教程  由于nonebot未启动导致无法连接这个就不细说了，自己去找仔细看文章开头的视频，看看哪步出错了，哪个该打开的窗口打不开。 端口号不一致 注：本小节中出现的“这里是端口号”处，均为一个端口号，也就是一个0-65535的数字，在复制粘贴的时候请务必把此处换成合法的端口号 这个错误在gocq端的报错和上个问题一致，均为： 与其不同的是，此时nonebot会有如下提示： 上下文中的端口号并不一致，导致无法成功握手 解决方法就是修改 .env 中的端口号，与gocq的端口号一致即可（具体怎么改去看视频演示） gocq中ws地址填写错误 注：本小节中出现的“这里是端口号”处，均为一个端口号，也就是一个0-65535的数字，在复制粘贴的时候请务必把此处换成合法的端口号 这个问题暂时较为常见（2022年初），因为nonebot2发布新版本（beta1）后，ws地址发生了改变，具体如下： 此问题导致的错误在gocq端的报错为： 此问题导致的错误在nb2端的报错为： 解决办法是将gocq的 config.yml 文件中的旧版地址替换为新版地址，也就是将 cqhttp 替换为 onebot/v11 。同时，造成该问题的也有可能是端口号冲突，在确保ws地址一致情况下，如还发生此问题，请更换一个较为不常见的端口号，例如10000-60000内的一个随机数，且避免23333、x8888、x0022这种具有特殊含义的数。 无法正常导入插件由于beta1版本升级导致的插件不兼容错误特征通常在nonebot端输出如下报错 ModuleNotFoundError: No module named &#39;nonebot.adapters.cqhttp&#39;，也可能产生其他的报错信息，不过此报错是最常见的。 解决方法催作者更新适配（强烈推荐）此方法是最优解，不多解释。不过，记得使用正规渠道（例如github issue）进行合理友善的催更，而不要去骚扰作者。对于弃坑或暂时无法进行适配的作者也要体谅与理解，有能力的话可以给源码进行pr，帮助作者进行适配。 根据版本差异手动适配在无法催作者更新适配的情况下，可以根据视频中的方法进行简易修改，或参照 这个讨论 进行修改。 如果你修改成功了，可以尝试将修改后的代码提交给原作者进行更新哦。 账号风控是企鹅针对第三方机器人的打压行为，为强推自家功能少得可怜而且根本没开放的机器人，以及遏制使用QQ机器人的黑灰产的的一种限制机器人行为的措施，目前呈加剧态势。 错误特征在gocq端出现如下提示：[WARNING]: 群消息发送失败: 账号可能被风控. 解决办法收购企鹅（强烈推荐）你收购企鹅之后，自然就不会有人来风控和冻结你的QQ号了，还能在家躺着赚钱，岂不美哉。 挂一会儿试试万一企鹅大发慈悲给你解除风控了呢 企业账号企业账号是不会风控的，就是开通费有亿点点贵。 换个号换个qq号吧，就当续命了"},{"title":"【NoneBot2】前言——使用NoneBot2搭建QQ机器人","date":"2022-01-30T15:59:07.000Z","url":"/2022/01/30/nonebot/%E3%80%90NoneBot2%E3%80%91%E5%89%8D%E8%A8%80%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8NoneBot2%E6%90%AD%E5%BB%BAQQ%E6%9C%BA%E5%99%A8%E4%BA%BA/","tags":[["NoneBot2","/tags/NoneBot2/"]],"categories":[["NoneBot2系列教程","/categories/NoneBot2%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B/"]],"content":"什么是nonebot？关于NoneBot2，我们先来引用一下官方文档的描述 NoneBot2 是一个可扩展的 Python 异步机器人框架，它会对机器人收到的事件进行解析和处理，并以插件化的形式，按优先级分发给事件所对应的事件响应器，来完成具体的功能。除了起到解析事件的作用，NoneBot 还为插件提供了大量实用的预设操作和权限控制机制。对于命令处理，它更是提供了完善且易用的会话机制和内部调用机制，以分别适应命令的连续交互和插件内部功能复用等需求。 得益于 Python 的 asyncio (opens new window)机制，NoneBot 处理事件的吞吐量有了很大的保障，再配合 WebSocket 通信方式（也是最建议的通信方式），NoneBot 的性能可以达到 HTTP 通信方式的两倍以上，相较于传统同步 I/O 的 HTTP 通信，更是有质的飞跃。 需要注意的是，NoneBot 仅支持 Python 3.7+ ，个人推荐的开发版本是3.8.10 看起来晦涩难懂？其实要点主要有以下几个： Nonebot2是基于python3.7及以上运行的 框架整体基于异步io 有完善的预设指令，可减轻开发者的工作强度 看到这里，你可能会大呼过瘾。如此优秀的框架已经迫不及待的想要使用了呢！且慢且慢，请先随我一起进行学习，慢慢上手。 如果你决心想要开始nonebot之旅，先让我给你泼盆冷水目前，QQ机器人社区处在一个十分艰难的状态下，一是由于腾讯的打压导致QQ机器人无法正常的工作，二是由于缺少足量的开发者和足够易用的工具（轮子），导致新手入门极为困难，因此如果你决定想要加入nonebot大家庭，那么你首先应该做到以下几点： 有足够的 python 基础以及足够的计算机操作系统的使用经验。计算机使用经验这一点我无法详细说明，由于每个人的情况均有所不同，所以我也无法很好的给出结论，但只会打游戏，其他多一点（如文件格式、路径）都不会还不肯学的的是完全不行的。python 基础方面，由于nonebot是基于asycnio的异步事件处理框架，使用难度上来说，某种程度上甚至高于一些简单的机器学习框架，而一般非专业和部分专业的大学学习的 python 课程是无法达到这个标准的，更别说零基础了。所以在玩转nonebot之前，将会有漫长的学习过程。 有足够的耐心上文也说了，由于开发者较少，nonebot是没有足够的拿来即用的软件生态的（或者说，现在整个机器人社区都是半死不活的状态），因此一些特殊需求很有可能需要你自己动手编写插件才能够实现，这也意味着使用成本的上升。 有足够的心态由于腾讯为了强推自家的机器人，和使用QQ机器人的黑灰产产业猖獗，导致腾讯对于野生机器人采取一棍子打死的态度，现在不光如此，甚至还想来踩上两脚。因此，你在使用机器人的时候说不定什么时候就会被 “风控” ，导致你的机器人发不出任何话，图片和其他炫酷的功能，甚至会导致你的账号冻结。因此，如果你要长期维护一个机器人，这是无法避免的问题。 如果你并没有被前方的艰难险阻劝退的话，欢迎你加入nonebot大家庭对于这个系列教程，我会尽我最大的努力，讲晦涩难懂的知识拆分，用尽量简单的方法教会大家如果使用这个项目。 更新计划视频部分：【零基础搭建QQ机器人】开源、免费、纯新手向的nonebot2.0.0beta版讲解讲解一些环境配置、部署以及其他不适合使用文字表达的部分，作为纯新手入门以及文字部分的补充。 第一章：Hello World——初识NoneBot2 在本章节，你将学会安装并配置你的第一个QQ机器人实例，并且可以掌握一些部署阶段常见的bug的特征以及解决方法，与视频部分相互补充。 第二章：哈？你说啥？——基础插件编写指南 在本章节，你将学会编写最基本的文字和图片的交互的插件。 第三章：在？来张setu？——进阶插件编写指南 在本章节，你将学会使机器人能够响应更多的事件，发送更多种类的信息，以及插件间通信、定时任务框架等。 第四章：你认真读README了吗？——常用API总结 在本章节，我将梳理nonebot及gocqhttp的常用api，并附上实例。 引言（基础知识）在正式开始教程之前，我想对以下几个概念进行说明： 初步认识前端、后端我们先思考一下，如果让你去实现一个QQ机器人，我们需要什么样的程序？如果你现在没有头绪，我们不妨先去看一下这个例子 顾客去饭店点了一份鱼香肉丝 服务员将你点鱼香肉丝的这件事汇报给后厨 后厨的厨师炒出了鱼香肉丝 服务员从后厨取出了鱼香肉丝 服务员把鱼香肉丝交给顾客 在这个过程中，顾客所接触到的人只有服务员，但服务员本身并不进行炒菜的工作，而厨师又始终不知道具体是谁哪位顾客了什么菜，那么这份菜究竟是怎么交付到这位顾客的手中的呢？ 我们再回顾一下第二条与第四条，这两条中服务员与厨师进行了“交互”，通过这种方式将厨师所需要的信息进行了传递。并且将厨师处理完毕的菜交到顾客的手中。 这种结构最大的优点是高度的可替代性和稳定性，例如今天厨师A生病了就可以换用厨师B，服务员Ｃ的老婆生孩子了就可以让服务员D多干一些。而不会出现因为某个环节的部分功能缺失导致全盘崩溃。 我们将目光放回到QQ机器人上，用上述的思路重新进行思考，把顾客、服务员与厨师替换成腾讯的服务器、前端、后端。 前端从腾讯的服务器上接收用户的信息（或其他） 将信息传递给后端 后端对信息进行分析，调用对应的模块进行处理 后端将处理结果推送给前端 前端将处理后的结果重新发送给腾讯的服务器（或其他） 怎么样，是不是一目了然了呢？ 在本篇教程中，我们使用的的前端是go-cqhttp，后端是NoneBot2，他们将很很好的完成上述的工作。 WebSocket WebSocket是一种在单个TCP连接上进行全双工通信的协议。WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。 在go-cqhttp与NoneBot的信息交互中，我们使用的就是反向WebSocket连接，也就是说go-cqhttp会主动去寻找nonebot2的程序，并将消息通过ws推送给nonebot2，因此相对于传统的HTTP连接，这种方法明显效率更高，延迟更低。 OneBot标准 OneBot标准是一个聊天机器人应用接口标准，旨在统一不同聊天平台上的机器人应用开发接口，使开发者只需编写一次代码即可应用到多种机器人平台。 在go-cqhttp与NoneBot的信息交互中，通讯的内容是基于OneBot的标准的改版，具体可以参考go-cqhttp的文档。 我们先回顾一下前文中的饭店。如果这个饭店是一个法餐馆，服务生是中国人而厨师是法国人，二者语言并不互通，那么还能够完成点餐的任务吗？明显不能，所以我们会人为要求服务生与厨师都用同一种语言进行交流，而这种语言标准就可以帮助二者有效的沟通。 在两个程序的沟通中，我们需要二者能够识别对方的信息，而不同的开发者不一定会使用一样的交流方式。因此随着OneBot标准的诞生，开发者可以使用这个标准的规范化的语言，那么语言不通的问题就迎刃而解了。 工作路径（Working Directory）、相对路径与绝对路径 The directory in which you are currently working. Path names that do not start with the root directory are assumed by the operating system to start from the working directory————该解释出自 Webopedia 简单来说，工作路径是相当于一个锚点，作为 相对路径 寻找文件的出发点。就类似于你去给别人指路（问路），一般来说会从你现在的位置作为起点进行寻路，那么这个就叫做相对路径。同理，如果现在的位置发生了改变，那么按照相同的路径来寻路自然到不了想要的目的地。 而 绝对路径 则不会受到该问题的影响，类似于从一个固定的建筑指路到目标地 ，那么只要目标地不发生改变，路线自然不会因为你现在的位置不同而出现改变。 那么，绝对路径就比相对路径好？ 答案是否定的。我们不难看出，绝对路径会要求目标地点不能发生改变，而在任意一个操作系统里面，复制和转移文件都是家常便饭的操作，因此，绝对路径的基本要求很难被满足，因此基本上只会出现在一些特殊场合和自己写的简易的脚本上，而无法应对任何位置的改变。 相反，相对路径如果能保证起始位置的准确，是能够在这个整体里面路径的准确的，类似于一个规划图完全相同的游乐园里面，摩天轮的位置相对过山车的位置始终一致，而无论这座游乐园实在北京还是上海。相对于现实中建筑物需要因地制宜进行规划，计算机中一个程序的复制和传播的成本几乎不费吹灰之力，那么相同结构的程序为了能在不同计算机上进行工作，甚至是不同操作系统上进行工作，是绝对无法离开相对路径来维持其内部程序和文件之间的联系的。 那么，这个如此重要的起始位置，就是工作路径。程序会依据起始位置来进行搜索所需要的文件，那么如果起始位置跑了，自然也无法搜索到想要的程序了。 在nonebot中，工作路径位于bot.py的根目录。 在第一节中，我们会了解到vscode如何人为指定工作路径，或通过python自身来修正工作路径。"},{"title":"关于我","date":"1969-12-31T16:00:00.000Z","url":"/1970/01/01/hello-world/","categories":[["undefined",""]],"content":"自我介绍不知道怎么写好，干脆不写了 b站 知乎 Github 邮箱&#x77;&#x65;&#108;&#x6c;&#95;&#52;&#48;&#x34;&#64;&#x6f;&#x75;&#116;&#108;&#111;&#111;&#107;&#x2e;&#x63;&#x6f;&#x6d; 微信公众号、微博、抖音、快手、西瓜、头条……全都没有，如果之后注册了会在这里补充的"}]